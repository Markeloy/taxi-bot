import logging
import os
from datetime import datetime, date, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
import xlsxwriter

load_dotenv()

API_TOKEN = os.getenv('API_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

class OrderTaxi(StatesGroup):
    location = State()
    last_name = State()
    hospital_target = State()
    time = State()
    passengers = State()
    destination = State()

class AwaitingAddress(StatesGroup):
    waiting_for_address = State()
    selecting_order = State()

orders = {}

driver_list = [
    {"id": 111111111, "car": "KIA RIO", "plate": "", "color": "–ë–µ–ª–∞—è"},
    {"id": 222222222, "car": "INFINITI M35X", "plate": "", "color": "–°–µ—Ä–∞—è"},
    {"id": 333333333, "car": "Volkswagen Tiguan", "plate": "", "color": "–ë–µ–ª—ã–π"},
    {"id": 444444444, "car": "Geely", "plate": "", "color": "–°–µ—Ä–∞—è"},
    {"id": 555555555, "car": "Mitsubishi Outlander", "plate": "", "color": "–û—Ä–∞–Ω–∂–µ–≤–∞—è"}
]

start_kb = ReplyKeyboardMarkup(resize_keyboard=True)
start_kb.add(KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏"))

location_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
location_kb.add("–†—É—Å–ê–≥—Ä–æ–ì—Ä—É–ø–ø (–ó–∞–≤–æ–¥)", "–¶–†–ë (–ë–æ–ª—å–Ω–∏—Ü–∞)")
location_kb.add("–î—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å", "–ù–∞–∑–∞–¥")

time_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
time_kb.add("–°–µ–π—á–∞—Å", "–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –ø–æ–∑–∂–µ", "–ù–∞–∑–∞–¥")

hospital_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
hospital_kb.add("–£–ª–∏—Ü–∞ –¢—É—Ä–∫–æ–≤–∞ 4", "–£–ª–∏—Ü–∞ –¢—É—Ä–∫–æ–≤–∞ 10", "–ù–∞–∑–∞–¥")

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏"))
        kb.add(KeyboardButton("üìã –ó–∞–∫–∞–∑—ã –∑–∞ –º–µ—Å—è—Ü"))
    else:
        kb = start_kb
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏.", reply_markup=kb)

@dp.message_handler(lambda message: message.text == "–ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏", state=None)
async def order_start(message: types.Message):
    await message.answer("–û—Ç–∫—É–¥–∞ –≤–∞—Å –∑–∞–±—Ä–∞—Ç—å?", reply_markup=location_kb)
    await OrderTaxi.location.set()

@dp.message_handler(state=OrderTaxi.location)
async def choose_location(message: types.Message, state: FSMContext):
    if message.text in ["–ù–∞–∑–∞–¥", "–ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏"]:
        await state.finish()
        await start(message)
        return
    location = message.text
    await state.update_data(location=location)

    if location == "–î—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é:")
        return
    if location == "–†—É—Å–ê–≥—Ä–æ–ì—Ä—É–ø–ø (–ó–∞–≤–æ–¥)":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
        await OrderTaxi.last_name.set()
        return
    if location == "–¶–†–ë (–ë–æ–ª—å–Ω–∏—Ü–∞)":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è:", reply_markup=hospital_kb)
        await OrderTaxi.hospital_target.set()
        return

    await message.answer("–ö–æ–≥–¥–∞ –ø–æ–¥–∞—Ç—å –º–∞—à–∏–Ω—É?", reply_markup=time_kb)
    await OrderTaxi.time.set()

@dp.message_handler(state=OrderTaxi.last_name)
async def get_last_name(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await order_start(message)
        return
    await state.update_data(last_name=message.text, time="19:30")
    await message.answer("–°–∫–æ–ª—å–∫–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤?", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add("–ù–∞–∑–∞–¥"))
    await OrderTaxi.passengers.set()

@dp.message_handler(state=OrderTaxi.hospital_target)
async def hospital_target_choice(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await order_start(message)
        return
    await state.update_data(destination=message.text)
    await message.answer("–ö–æ–≥–¥–∞ –ø–æ–¥–∞—Ç—å –º–∞—à–∏–Ω—É?", reply_markup=time_kb)
    await OrderTaxi.time.set()

@dp.message_handler(state=OrderTaxi.time)
async def choose_time(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await order_start(message)
        return
    await state.update_data(time=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤?", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add("–ù–∞–∑–∞–¥"))
    await OrderTaxi.passengers.set()

@dp.message_handler(state=OrderTaxi.passengers)
async def choose_passengers(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await order_start(message)
        return
    passengers = message.text
    if not passengers.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ —á–∏—Å–ª–æ–º.")
        return
    passengers = int(passengers)
    data = await state.get_data()
    location = data.get('location', '-')
    time = data.get('time', '-')
    username = message.from_user.username or message.from_user.full_name

    cars_needed = 1
    if location == "–†—É—Å–ê–≥—Ä–æ–ì—Ä—É–ø–ø (–ó–∞–≤–æ–¥)":
        if passengers > 8:
            cars_needed = 3
        elif passengers > 4:
            cars_needed = 2

    order_id = message.from_user.id
    orders[order_id] = {
        'client': username,
        'location': location,
        'last_name': data.get('last_name', ''),
        'time': time,
        'passengers': passengers,
        'cars_needed': cars_needed,
        'destination': data.get('destination', ''),
        'status': 'pending',
        'created': datetime.now().date()
    }

    order_summary = (
        f"üöñ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Ç–∞–∫—Å–∏\n"
        f"–ö–ª–∏–µ–Ω—Ç: @{username} {data.get('last_name', '')}\n"
        f"–û—Ç–∫—É–¥–∞: {location}\n"
        f"–í—Ä–µ–º—è: {time}\n"
        f"–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {passengers}\n"
        f"–ù—É–∂–Ω–æ –º–∞—à–∏–Ω: {cars_needed}\n\n"
        f"–ù–∞–∑–Ω–∞—á—å—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è: /assign_{order_id}"
    )
    await bot.send_message(ADMIN_ID, order_summary)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π—Ç–µ, –º—ã –∏—â–µ–º –º–∞—à–∏–Ω—É.", reply_markup=start_kb)
    await state.finish()

@dp.message_handler(lambda message: message.text.startswith("/assign_"))
async def assign_driver(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        order_id = int(message.text.replace("/assign_", ""))
        order = orders.get(order_id)
        if not order:
            await message.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        keyboard = InlineKeyboardMarkup()
        for driver in driver_list:
            btn_label = f"{driver.get('car')} {driver.get('color', '')}".strip()
            keyboard.add(InlineKeyboardButton(
                text=btn_label,
                callback_data=f"assign|{order_id}|{driver['id']}"
            ))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞:", reply_markup=keyboard)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@dp.callback_query_handler(lambda c: c.data.startswith("assign|"))
async def confirm_assignment(callback_query: types.CallbackQuery, state: FSMContext):
    _, order_id, driver_id = callback_query.data.split("|")
    order_id = int(order_id)
    driver_id = int(driver_id)
    order = orders.get(order_id)

    if not order:
        await callback_query.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    driver = next((d for d in driver_list if d["id"] == driver_id), None)
    if not driver:
        await callback_query.answer("‚ö†Ô∏è –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    assigned = orders[order_id].setdefault("drivers", [])
    if driver_id in assigned:
        await callback_query.answer("–≠—Ç–æ—Ç –≤–æ–¥–∏—Ç–µ–ª—å —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.", show_alert=True)
        return

    assigned.append(driver_id)
    orders[order_id]["status"] = "assigned"

    await bot.send_message(order_id,
        f"üöï –í–∞—à –≤–æ–¥–∏—Ç–µ–ª—å: {driver.get('car')} {driver.get('color', '')}\n–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞ –º–µ—Å—Ç–µ –ø–æ–¥–∞—á–∏!")
    await callback_query.answer("‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω.")

    total_needed = orders[order_id].get("cars_needed", 1)
    if len(assigned) < total_needed:
        await bot.send_message(ADMIN_ID,
            f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {driver.get('car')} –¥–æ–±–∞–≤–ª–µ–Ω. –ù–∞–∑–Ω–∞—á—å—Ç–µ –µ—â—ë {total_needed - len(assigned)} –º–∞—à–∏–Ω(—ã) –¥–ª—è –∑–∞–∫–∞–∑–∞ ID {order_id}.")
        return

    kb = ReplyKeyboardMarkup(resize_keyboard=True).add("üìù –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    await bot.send_message(ADMIN_ID,
        f"üü¢ –í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ –∑–∞–∫–∞–∑ @{order['client']} (ID {order_id})",
        reply_markup=kb)
    await state.update_data(order_id=order_id)
    await AwaitingAddress.selecting_order.set()

@dp.message_handler(lambda m: m.text == "üìù –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤", state=AwaitingAddress.selecting_order)
async def prompt_manual_address_entry(message: types.Message, state: FSMContext):
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏):")
    await AwaitingAddress.waiting_for_address.set()

@dp.message_handler(lambda m: not m.text.startswith("/") and m.text != "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", state=AwaitingAddress.waiting_for_address)
async def set_custom_address(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    data = await state.get_data()
    order_id = data.get("order_id")
    if not order_id or order_id not in orders:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.finish()
        return
    destination_list = orders[order_id].setdefault("destination_list", [])
    destination_list.append(message.text.strip())
    orders[order_id]["status"] = "completed"
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑")
    await message.answer(
        f"‚úÖ –ê–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω: {message.text.strip()}\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑'.",
        reply_markup=kb
    )

@dp.message_handler(lambda m: m.text == "üìã –ó–∞–∫–∞–∑—ã –∑–∞ –º–µ—Å—è—Ü")
async def list_orders_by_admin(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    today = date.today()
    month_ago = today - timedelta(days=30)
    filename = f"orders_report_{today.isoformat()}.xlsx"
    workbook = xlsxwriter.Workbook(filename)
    worksheet = workbook.add_worksheet()
    headers = ["–î–∞—Ç–∞", "–ö–ª–∏–µ–Ω—Ç", "–§–∞–º–∏–ª–∏—è", "–û—Ç–∫—É–¥–∞", "–ö—É–¥–∞", "–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤", "–ú–∞—à–∏–Ω", "–°—Ç–∞—Ç—É—Å", "–î–æ–ø. –∞–¥—Ä–µ—Å–∞"]
    for col, header in enumerate(headers):
        worksheet.write(0, col, header)

    row = 1
    to_delete = []
    for order_id, order in orders.items():
        created = order.get("created")
        if not created:
            continue
        if (today - created).days > 35:
            to_delete.append(order_id)
            continue
        if created >= month_ago:
            worksheet.write(row, 0, str(created))
            worksheet.write(row, 1, f"@{order['client']}")
            worksheet.write(row, 2, order.get('last_name', ''))
            worksheet.write(row, 3, order['location'])
            worksheet.write(row, 4, order.get('destination', '-'))
            worksheet.write(row, 5, order['passengers'])
            worksheet.write(row, 6, order['cars_needed'])
            worksheet.write(row, 7, order['status'])
            worksheet.write(row, 8, ", ".join(order.get("destination_list", [])))
            row += 1

    workbook.close()

    with open(filename, "rb") as f:
        await bot.send_document(message.chat.id, f)

    os.remove(filename)
    for oid in to_delete:
        del orders[oid]

@dp.message_handler(lambda m: m.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", state=AwaitingAddress.waiting_for_address)
async def finish_manual_input(message: types.Message, state: FSMContext):
    await message.answer("üü¢ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=start_kb)
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
